})
return (feat_means)
read.single.feat <- function(db_path, feat_name, feat_table){
my_db <- src_sqlite(db_path)
exp_fields = c("e.video_id AS video_id", "prefix", "set_n", "channel", "stage_pos", "video_timestamp",
"N_Worms", "Picker", "Strain", "set_delta_time", "exp_delta_time")
sql_cmd = paste0("SELECT ", paste(exp_fields, collapse = ',') , "," , feat_name,
" FROM experiments AS e JOIN ", feat_table, " AS tab ON tab.video_id = e.video_id")
feat_means = as.data.table(tbl(my_db, sql(sql_cmd)))
feat_means <- within(feat_means, {
exp_name <- factor(exp_name)
Strain <- as.factor(Strain)
Picker <- as.factor(Picker)
video_id <- as.factor(video_id)
channel <- as.factor(channel)
set_n <- as.factor(set_n)
stage_pos <- as.factor(channel)
video_timestamp <- ymd_hms(video_timestamp)
})
return (feat_means)
}
db_path = '/Users/ajaver/OneDrive - Imperial College London/compare_strains_DB/control_experiments_short_movies_new.db'
experiments = read.experiments(db_path)
worm_l = read.single_feat(db_path, 'length', 'medians')
library(ggplot2)
p <- ggplot(worm_l, aes(x=Strain,y=length)) #+ facet_wrap(~as.factor(f2), nrow=5)
p + geom_boxplot() + facet_grid(. ~ worm_l.exp_name)
worm_l.exp_name
worm_l$exp_name
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
worm_l
worm_l$exp_name
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
p + geom_boxplot() + facet_grid(. ~ worm_l.exp_name)
worm_l.exp_name
worm_l$exp_name
colnames(worm_l)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
feat_means
worm_l
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
sql_cmd
worm_l = read.single_feat(db_path, 'length', 'medians')
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
worm_l.exp_name
worm_l$exp_name
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
p <- ggplot(worm_l, aes(x=Strain,y=length), colour = 'N_worm')
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
p <- ggplot(worm_l, aes(x=Strain,y=length), colour = 'N_Worms')
p + geom_boxplot() + facet_grid(. ~ exp_name)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R')
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = 'N_Worms'))
p + geom_boxplot() + facet_grid(. ~ exp_name)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = N_Worms))
p + geom_boxplot() + facet_grid(. ~ exp_name)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(. ~ exp_name)
p + geom_boxplot() + facet_grid(exp_name ~ .)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(exp_name)))
p + geom_boxplot() + facet_grid(N_Worms ~ .)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid( ~ .)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(. ~ exp_name)
p + geom_boxplot() + facet_grid(exp_name ~ .)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
worm_l
for (feat_name in c('length', 'midbody_width', 'midbody_speed_pos')) {
worm_l = read.single.feat(db_path, feat_name, 'medians')
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(exp_name ~ .)
}
p + geom_boxplot() + facet_grid(exp_name ~ .)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l
na.omit(worm_l)
worm_l
na.omit(worm_l)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R')
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
p <- ggplot(worm_l, aes(x=Strain,y=length, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(exp_name ~ .)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
p <- ggplot(worm_l, aes(x=Strain,y=main_feat, colour = factor(N_Worms)))
p + geom_boxplot() + facet_grid(exp_name ~ .)
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = factor("N_Worms")))
p + geom_boxplot() + facet_grid(exp_name ~ .)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = factor("N_Worms")))
p + geom_boxplot() + facet_grid(exp_name ~ .)
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l$N_worms_f = factor(worm_l$N_worms)
worm_l$N_worms = factor(worm_l$N_worms)
worm_l$N_worms = factor(worm_l$N_worms)
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l$N_worms = factor(worm_l$N_worms)
factor(worm_l$N_worms)
worm_l
colnames(worm_l)
worm_l$N_Worms
factor(worm_l$N_worms)
factor(worm_l[,"N_worms"])
fworm_l[,"N_worms"]
worm_l[,"N_worms"]
worm_l["N_worms",]
worm_l$N_Worms
factor(worm_l$N_Worms)
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l$N_worms = factor(worm_l$N_worms)
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l = read.single.feat(db_path, feat_name, 'medians')
feat_means <- within(worm_l, {
exp_name <- factor(N_worms)
})
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = "N_Worms"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l <- within(worm_l, {
exp_name <- factor(N_worms)
})
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l <- within(worm_l, {
N_worms <- factor(N_worms)
})
worm_l
worm_l$N_Worms
as.factor(worm_l$N_worms)
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l <- within(worm_l, {
N_worms <- as.factor(N_worms)
})
worm_l
class(worm_l)
dt[, N_Worms:=as.character(N_Worms)]
worm_l[, N_Worms:=as.character(N_Worms)]
worm_l$N_Worms
worm_l = worm_l[, N_Worms:=as.character(N_Worms)]
worm_l$N_Worms
worm_l = worm_l[, N_Worms_f:=as.character(N_Worms)]
worm_l[, N_Worms_f:=as.character(N_Worms)]
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l = worm_l[, N_Worms_f:=as.character(N_Worms)]
worm_l
worm_l
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = "N_Worms"))
worm_l = read.single.feat(db_path, feat_name, 'medians')
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]
p <- ggplot(worm_l, aes_string(x = "Strain", y = feat_name, colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
features.names
class(features.names)
features.names
len(features.names)
size(features.names)
dim(features.names)
class(features.names)
type(features.names)
paste('a')
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
colnames(worm_l)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
len(worm_l)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
worm_l
dim(worm_l)
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_width', colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_width', colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_speed_pos', colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]#useful for plotting
for (feat_name in c('length', 'midbody_width', 'midbody_speed_pos')) {
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_speed_pos', colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
}
for (feat_name in c('length', 'midbody_width', 'midbody_speed_pos')) {
print(feat_name)
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_speed_pos', colour = "N_Worms_f"))
p + geom_boxplot() + facet_grid(exp_name ~ .)
}
worm_l = worm_l[, N_Worms_f:=factor(N_Worms)]#useful for plotting
for (feat_name in c('length', 'midbody_width', 'midbody_speed_pos')) {
p <- ggplot(worm_l, aes_string(x = "Strain", y = 'midbody_speed_pos', colour = "N_Worms_f"))
p <- p + geom_boxplot() + facet_grid(exp_name ~ .)
print(p)
}
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains_stats
strains
features.data
features.data$Strain
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains
features.data$Strain
strains = levels(features.data$Strain)
strains
strains[-which(strains == ctr_strain)]
strains == ctr_strain
strains[-which(strains == control.strain)]
control.strain = 'N2'
strains = levels(features.data$Strain)
strains[-which(strains == control.strain)]
control.strain = 'N2'
strains = levels(features.data$Strain)
strains = strains[-which(strains == control.strain)]
match(control.strain,strains)
control.strain %in% strains
stopifnot(control.strain %in% strains)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/load_db.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
get.model.strain('trp-4', ctr_strain, pred_feats)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
pred_feats
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains_stats = lapply(strains, function(x){get.model.strain(x, ctr_strain, pred_feats)})
get.model('midbody_speed', comp_data, frac_thresh = 0.1)
comp_data = get.comp.data(features.data, 'tpr-4', control.strain)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strain_ind = feat_table$Strain == strain
strain_ind = features.data$Strain == strain
strain_ind = features.data$Strain == strain
strain = 'tpr-4'
strain_ind = features.data$Strain == strain
ctr_strain_ind = features.data$Strain == control.strain
exp_ind = levels(droplevels(features.data$experiment_id[strain_ind]))
exp_ind = levels(droplevels(features.data$exp_name[strain_ind]))
good_ind = (features.data$experiment_id %in% exp_ind) & (strain_ind | ctr_strain_ind)
comp_data = features.data[good_ind, ]
comp_data <- within(comp_data, {
strain_cmp <- strain != ctr_strain
plate_id <- droplevels(plate_id)
video_id <- droplevels(video_id)
experiment_id <- droplevels(experiment_id)
strain <- droplevels(strain)
})
comp.data = features.data[good_ind, ]
comp.data = comp.data[, strain_cmp:=Strain != control.strain]#useful for plotting
droplevels(comp.data)
comp.data
good_ind
strain_ind = features.data$Strain == strain
ctr_strain_ind = features.data$Strain == control.strain
strain_ind
levels(features.data$Strain)
strain
sum(features.data$Strain=="trp-4")
sum(exp_ind)
strain.ind = features.data$Strain == strain
control.strain.ind = features.data$Strain == control.strain
control.strain = 'N2'
features.data = features.data[, is_control:=Strain == control.strain]
strains = levels(features.data$Strain)
stopifnot(control.strain %in% strains)
strains = strains[-which(strains == control.strain)]
features.data['is_control']
features.data$is_control
sum(features.data$is_control)
valid = (features.data$is_control | features.data$Strain == strain)
valid
features.data[valid, ]
comp.data = features.data[valid, ]
droplevels(comp.data)
levels(comp.data$Strain)
levels(droplevels(comp.data)$Strain)
valid = (features.data$is_control | features.data$Strain == strain)
comp.data = features.data[valid, ]
comp.data = droplevels(comp.data)
levels(comp.data)
levels(comp.data$Strain)
strain
sum(features.data$is_control)
sum(features.data$Strain == strain)
features.data$Strain == strain
strain
level(features.data$Strain)
levels(features.data$Strain)
sum(features.data$Strain == "HW")
sum(features.data$Strain == "trp-4")
strain = 'trp-4'
n.strains = length(levels(comp.data$Strain))
stopifnot(n.strains==2)
comp.data = features.data[valid, ]
valid = (features.data$is_control | features.data$Strain == strain)
comp.data = features.data[valid, ]
comp.data = droplevels(comp.data)
n.strains = length(levels(comp.data$Strain))
stopifnot(n.strains==2)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
comp_data = get.comp.data(features.data, strain)
comp.data = get.comp.data(features.data, strain)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains[0]
strains[1]
strain = strains[1]
comp.data = get.comp.data(features.data, strain)
comp.data
valid = (features.data$is_control | features.data$Strain == strain)
sum(valid)
comp.data = features.data[valid, ]
comp.data = droplevels(comp.data)
len(comp.data)
dim(comp.data)
comp.data = get.comp.data(features.data, strain)
len(comp.data)
dim(comp.data)
source("model.R")
comp.data = get.comp.data(features.data, strain)
dim(comp.data)
features.data$is_control
valid = (features.data$is_control | features.data$Strain == strain)
comp.data = features.data[valid, ]
comp.data = droplevels(comp.data)
n.strains = length(levels(comp.data$Strain))
stopifnot(n.strains==2)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
len(comp.data)
dim(comp.data)
sum(is.na(comp.data[[feat.name]]))/dim(comp.data)[1]
feat.name = 'midbody_speed'
ff = get.model(feat.name, comp_data, frac_thresh = 0.1)
good_frac = 1 - sum(is.na(comp.data[[feat.name]]))/dim(comp.data)[1]
good_frac
paste0('log10(abs(', feat.name, ') + 1) ~ strain_cmp + ', RANDOM_EFFECTS)
fit.full <- lmer(paste0('log10(abs(', feat.name, ') + 1) ~ strain_cmp + ', RANDOM_EFFECTS),
data = comp.data, na.action = na.exclude)#, REML=FALSE )
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
ff
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
features.names = feat.names
feat.names = features.names
get.model.comp = function(feat) {
progress_wrapper(feat, get.model, feat, comp.data)
}
feats.stats = sapply(feat.names, get.model.comp)
features.names
sort(features.names)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
control.strain = 'N2'
features.names = c('midbody_speed', 'neck_bend_mean', 'length', 'width_length_ratio')
features.data = read.feats(db_path, features.names, 'medians', control.strain)
strains = levels(features.data$Strain)
stopifnot(control.strain %in% strains)
strains = strains[-which(strains == control.strain)]
strain = strains[1]
get.model.strain(strain, features.names)
get.model.comp = function(feat) {
progress_wrapper(feat, get.model, feat, comp.data)
}
feats.stats = sapply(feat.names, get.model.comp)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
get.model.comp = function(feat) {
progress_wrapper(feat, get.model, feat, comp.data)
}
feats.stats = sapply(feat.names, get.model.comp)
experiments = read.experiments(db_path)
control.strain = 'N2'
features.names = c('midbody_speed', 'neck_bend_mean', 'length', 'width_length_ratio')
features.data = read.feats(db_path, features.names, 'medians', control.strain)
features.data
features.names
get.model.comp = function(feat) {
progress_wrapper(feat, get.model, feat, comp.data)
}
feats.stats = sapply(features.names, get.model.comp)
comp.data = get.comp.data(strain)
comp.data = get.comp.data(comp.data, strain)
feats.stats = progress.wrapper('T1', get.mod.linear, feat.names, comp.data)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
fit.full <- lmer(paste0('log10(abs(', feat.name, ') + 1) ~ is_control + ', RANDOM_EFFECTS),
data = comp.data, na.action = na.exclude), REML=FALSE )
paste0('log10(abs(', feat.name, ') + 1) ~ is_control + ', RANDOM_EFFECTS)
fit.full <- lmer(paste0('log10(abs(', feat.name, ') + 1) ~ is_control + ', RANDOM_EFFECTS),
data = comp.data, na.action = na.exclude, REML=FALSE )
RANDOM_EFFECTS = '(1+is_control | exp_name/channel)'
fit.full <- lmer(paste0('log10(abs(', feat.name, ') + 1) ~ is_control + ', RANDOM_EFFECTS),
data = comp.data, na.action = na.exclude, REML=FALSE )
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
feats.stats
strains_stats = lapply(strains, function(x){get.model.strain(features.data, x)})
strains_stats = lapply(strains, function(x){get.model.strain(features.data, x, features.names)})
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
sprintf('%s total time: %2.2fs', 'a', 1.2345)
sprintf('%s total time -> %2.2fs', 'a', 1.2345)
feats.stats = progress.wrapper(strain, get.mod.linear, features.names, comp.data)
progress.wrapper = function(progress.txt, FUNC, ...){
start.time <- Sys.time()
output = FUNC(...)
txt = sprintf('%s total time -> %2.2fs', progress.txt, Sys.time() - start.time)
print(txt)
return(output)
}
feats.stats = progress.wrapper(strain, get.mod.linear, features.names, comp.data)
get.mod.linear = function(features.names, comp.data){
get.model.comp = function(feat) {
progress.wrapper(feat, get.model, feat, comp.data)
}
feats.stats = sapply(features.names, get.model.comp)
return(feats.stats)
}
get.model.strain = function(comp.data, strain, features.names){
comp.data = get.comp.data(comp.data, strain)
#calculate the linear model, displaying the time per feature
feats.stats = progress.wrapper(strain, get.mod.linear, features.names, comp.data)
return(feats.stats)
}
feats.stats = progress.wrapper(strain, get.mod.linear, features.names, comp.data)
txt = paste(strain,  "total time")
sprintf('%s total time -> %2.2fs', 'a', 1.2345)
txt
comp.data
comp.data[comp.data$is_control][0]
comp.data[comp.data$is_control][1]
comp.data[comp.data$is_control]$Strain[1]
as.character(comp.data[comp.data$is_control]$Strain[1])
as.character(comp.data[!comp.data$is_control]$Strain[1])
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains_stats
strains_stats['HW']
strains_stats
strains_stats[[1]]
strains_stats.names = strains
strains_stats
y_str = paste0("log2(abs(", feat_name, "+1))")
p <- ggplot(features.data, aes_string(x = "Strain", y = y_str, colour = "N_Worms_f"))
p <- p + geom_boxplot() + facet_grid(exp_name ~ .)
print(p)
features.data = features.data[, N_Worms_f:=factor(N_Worms)]#useful for plotting
y_str = paste0("log2(abs(", feat_name, "+1))")
p <- ggplot(features.data, aes_string(x = "Strain", y = y_str, colour = "N_Worms_f"))
p <- p + geom_boxplot() + facet_grid(exp_name ~ .)
print(p)
features.names
features.names[1:5]
features.names[1:3]
features.data = features.data[, N_Worms_f:=factor(N_Worms)]#useful for plotting
for (feat_name in features.names[1:3]) {
#p <- ggplot( aes(x = experiment_id, y = log2(abs(midbody_speed+1)), fill=strain), data=feat_table) + geom_boxplot()
y_str = paste0("log2(abs(", feat_name, "+1))")
p <- ggplot(features.data, aes_string(x = "Strain", y = y_str, colour = "N_Worms_f"))
p <- p + geom_boxplot() + facet_grid(exp_name ~ .)
print(p)
}
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
names(strains_stats) = strains
strains_stats
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains.stats
strains.stats['HW']
strains.stats['HW']['length]
strains.stats['HW']['length']
strains.stats['HW']['length']
strains.stats$HW[, 'likelihood']
colnames(strains.stats$HW)
strains.stats$HW[, 'length']
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
strains.stats$HW
strains.stats$HW[,'length']
strains.stats$HW['$fit.full','length']
strains.stats$HW['fit.full','length']
strains.stats$unc-9['fit.full','length']
strains.stats$('unc-9')['fit.full','length']
strains.stats[['unc-9']]['fit.full','length']
strains.stats[['unc-9']]['likelihood','length']
strains.stats[['HW']]['likelihood','length']
strains.stats[['trp-4']]['likelihood','length']
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
dim(comp_data)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
source('~/Documents/GitHub/process-rig-data/R_models/main.R', echo=TRUE)
